let explain;
//explicaciones
let string = {
  constructor: function () {
    explain = `String se puede declarar de dos maneras pero no hacen lo mismo, la primera es
    new String("Hola mundo"); la cual al ser una clase se vuelve un objecto a diferencia que si lo declaramos asi
    String("Hola Mundo") este valor si es de tipo cadena.
    Nos daremos cuenta al ocupar typeof: Este es el primer caso
    ${typeof new String("Hola mundo")}, 
    Y este es el segundo caso: ${typeof String("Hola Mundo")}
    `;
    return explain;
  },
  at: function () {
    explain =
      explain = `El m√©todo at() permite acceder a un car√°cter en una cadena con un √≠ndice. Esto es √∫til porque acepta √≠ndices negativos para contar desde el final.
    Ejemplo
    const saludo = "Hola Mundo"; ${(saludo = "Hola Mundo")}
    Primer car√°cter: ${saludo.at(0)} 
    √öltimo car√°cter: ${saludo.at(-1)}
    `;
    return explain;
  },

  charAt: function () {
    explain = `El m√©todo charAt() devuelve el car√°cter en el √≠ndice especificado de una cadena. No admite √≠ndices negativos.
    Ejemplo:
    const palabra = "JavaScript"; ${(palabra = "JavaScript")}
    Car√°cter en la posici√≥n 0: ${palabra.charAt(0)} 
    Car√°cter en la posici√≥n 4: ${palabra.charAt(4)} 
    `;
    return explain;
  },

  charCodeAt: function () {
    explain = `El m√©todo charCodeAt() devuelve el c√≥digo Unicode del car√°cter en el √≠ndice especificado.
    Ejemplo:
    const letra = "A"; ${(letra = "A")}
    C√≥digo Unicode de la letra A: ${letra.charCodeAt(0)} 
    `;
    return explain;
  },

  codePointAt: function () {
    explain = `El m√©todo codePointAt() devuelve el valor Unicode del car√°cter en el √≠ndice dado, incluyendo caracteres especiales o emojis.
    Ejemplo:
    const emoji = "üòÉ"; ${(emoji = "üòÉ")}
    Valor Unicode del emoji: ${emoji.codePointAt(0)}
    `;
    return explain;
  },

  concat: function () {
    explain = `El m√©todo concat() une dos o m√°s cadenas y devuelve una nueva cadena.
    Ejemplo:
    const parte1 = "Hola, "; ${(parte1 = "Hola, ")}
    const parte2 = "Mundo!"; ${(parte2 = "Mundo!")}
    Resultado de la concatenaci√≥n: ${parte1.concat(parte2)} 
    `;
    return explain;
  },

  endsWith: function () {
    explain = `El m√©todo endsWith() verifica si una cadena termina con los caracteres especificados.
    Ejemplo:
    const frase = "JavaScript es divertido"; ${(frase =
        "JavaScript es divertido")}
    ¬øTermina con "divertido"? ${frase.endsWith("divertido") ? "Si" : "No"} 
    ¬øTermina con "aburrido"? ${frase.endsWith("aburrido") ? "Si" : "No"} 
    `;
    return explain;
  },

  includes: function () {
    explain = `El m√©todo includes() verifica si una cadena contiene una subcadena especificada.
    Ejemplo:
    const texto = "Programar es genial"; ${(texto = "Programar es genial")}
    ¬øContiene "genial"? ${texto.includes("genial") ? "Si" : "No"} 
    ¬øContiene "dif√≠cil"? ${texto.includes("dif√≠cil") ? "Si" : "No"}
    `;
    return explain;
  },

  indexOf: function () {
    explain = `El m√©todo indexOf() devuelve el √≠ndice de la primera aparici√≥n de un valor en la cadena. Si no se encuentra, devuelve -1.
    Ejemplo:
    const palabra = "JavaScript"; ${(palabra = "JavaScript")}
    √çndice de "S": ${palabra.indexOf("S")} 
    √çndice de "X": ${palabra.indexOf("X")} 
    `;
    return explain;
  },

  isWellFormed: function () {
    explain = `El m√©todo isWellFormed() verifica si la cadena est√° bien formada de acuerdo con la codificaci√≥n Unicode.
    Ejemplo:
    const cadena = "Hola Mundo"; ${(cadena = "Hola Mundo")}
    ¬øEst√° bien formada?: ${cadena.isWellFormed() ? "Si" : "No"}
    `;
    return explain;
  },

  lastIndexOf: function () {
    explain = `El m√©todo lastIndexOf() devuelve la √∫ltima posici√≥n de una subcadena en la cadena, o -1 si no se encuentra.
    Ejemplo:
    const frase = "JavaScript es incre√≠ble. JavaScript es vers√°til.";${(frase =
        "JavaScript es incre√≠ble. JavaScript es vers√°til.")}
    √öltima aparici√≥n de 'JavaScript': ${frase.lastIndexOf("JavaScript")} 
    `;
    return explain;
  },

  localeCompare: function () {
    explain = `El m√©todo localeCompare() compara dos cadenas seg√∫n las reglas de la configuraci√≥n regional.
    Ejemplo:
    const cadena1 = "a"; ${(cadena1 = "a")}
    const cadena2 = "b"; ${(cadena2 = "b")}
    Comparaci√≥n de 'a' con 'b': ${cadena1.localeCompare(
      cadena2
    )}, la respuesta es -1 porque 'a' viene antes de 'b'
    `;
    return explain;
  },

  match: function () {
    explain = `El m√©todo match() busca coincidencias de una expresi√≥n regular en la cadena.
    Ejemplo:
    const texto = "Los n√∫meros son 1, 2 y 3."; ${(texto =
        "Los n√∫meros son 1, 2 y 3.")}
    Coincidencias de d√≠gitos: ${texto.match(/\d+/g)} 
    `;
    return explain;
  },

  matchAll: function () {
    explain = `El m√©todo matchAll() devuelve todas las coincidencias de una expresi√≥n regular, incluyendo grupos de captura.
    Ejemplo:
    const  ${(texto = "C√≥digos: A1, B2, C3")}
    Coincidencias con grupos: ${[...texto.matchAll(/(\w)(\d)/g)]} 
    `;
    return explain;
  },

  normalize: function () {
    explain = `El m√©todo normalize() devuelve la forma normalizada Unicode de la cadena.
    Ejemplo:
    const ${(texto = "√©")};
    Forma normalizada NFD: ${texto.normalize("NFD")} 
    `;
    return explain;
  },

  padEnd: function () {
    explain = `El m√©todo padEnd() rellena la cadena al final hasta la longitud especificada con la cadena dada o espacios.
    Ejemplo:
    const ${(palabra = "Hola")}
    Texto rellenado: '${palabra.padEnd(10, "-")}' 
    `;
    return explain;
  },

  padStart: function () {
    explain = `El m√©todo padStart() rellena la cadena al final hasta la longitud especificada con la cadena dada o espacios.
    Ejemplo:
    const ${(palabra = "Hola")}
    Texto rellenado: '${palabra.padStart(10, "-")}' 
    `;
    return explain;
  },

  repeat: function () {
    explain = `El m√©todo repeat() repite la cadena un n√∫mero determinado de veces.
    Ejemplo:
    const ${(saludo = "Hola")};
    Cadena repetida: ${saludo.repeat(3)}
    `;
    return explain;
  },

  replace: function () {
    explain = `El m√©todo replace() reemplaza la primera coincidencia de una subcadena por otra en la cadena.
    Ejemplo:
    const ${(frase = "El cielo es azul")};
    Reemplazo de 'azul' por 'rojo': ${frase.replace("azul", "rojo")}
    `;
    return explain;
  },

  replaceAll: function () {
    explain = `El m√©todo replaceAll() reemplaza todas las coincidencias de una subcadena por otra en la cadena.
    Ejemplo:
    const ${(frase = "Luz roja, luz roja")};
    Reemplazo de 'roja' por 'verde': ${frase.replaceAll("roja", "verde")}
    `;
    return explain;
  },

  search: function () {
    explain = `El m√©todo search() busca una expresi√≥n regular en la cadena y devuelve el √≠ndice de la primera coincidencia.
    Ejemplo:
    const ${(texto = "Buscando una coincidencia")};
    √çndice de la primera coincidencia con 'coincidencia': ${texto.search(
      "coincidencia"
    )}
    `;
    return explain;
  },

  slice: function () {
    explain = `El m√©todo slice() extrae una secci√≥n de la cadena y devuelve una nueva cadena sin modificar la original.
    Ejemplo:
    const ${(texto = "Hola Mundo")};
    Subcadena extra√≠da: ${texto.slice(0, 4)} 
    `;
    return explain;
  },

  split: function () {
    explain = `El m√©todo split() divide una cadena en un array de subcadenas.
    Ejemplo:
    const ${(texto = "Manzana, Pera, Naranja")};
    Array de frutas: ${texto.split(", ")} 
    `;
    return explain;
  },

  startsWith: function () {
    explain = `El m√©todo startsWith() verifica si una cadena comienza con una subcadena espec√≠fica.
    Ejemplo:
    const ${(saludo = "Hola Mundo")};
    ¬øComienza con 'Hola'?: ${saludo.startsWith("Hola") ? "Si" : "No"} 
    `;
    return explain;
  },

  substring: function () {
    explain = `El m√©todo substring() devuelve una subcadena entre dos √≠ndices especificados.
    Ejemplo:
    const ${(texto = "JavaScript")};
    Subcadena extra√≠da: ${texto.substring(4, 10)} 
    `;
    return explain;
  },

  symbol_iterator: function () {
    explain = `El m√©todo [Symbol.iterator]() devuelve un objeto que permite iterar sobre cada car√°cter de la cadena.
    Ejemplo:
    const ${(texto = "Iteraci√≥n")};
    Iteraci√≥n por caracteres: ${[...texto[Symbol.iterator]()]}
    `;
    return explain;
  },

  toLocaleLowerCase: function () {
    explain = `El m√©todo toLocaleLowerCase() convierte la cadena en min√∫sculas, respetando las reglas locales.
    Ejemplo:
    const ${(texto = "HOLA MUNDO")};
    Min√∫sculas locales: ${texto.toLocaleLowerCase()}
    `;
    return explain;
  },

  toLocaleUpperCase: function () {
    explain = `El m√©todo toLocaleUpperCase() convierte la cadena en may√∫sculas, respetando las reglas locales.
    Ejemplo:
    const ${(texto = "hola mundo")};
    May√∫sculas locales: ${texto.toLocaleUpperCase()} 
    `;
    return explain;
  },

  toLowerCase: function () {
    explain = `El m√©todo toLowerCase() convierte la cadena a min√∫sculas.
    Ejemplo:
    const ${(texto = "HOLA MUNDO")};
    Min√∫sculas: ${texto.toLowerCase()}
    `;
    return explain;
  },

  toString: function () {
    explain = `El m√©todo toString() devuelve una cadena que representa al objeto de cadena.
    Ejemplo:
    const ${(cadena = new String("Hola Mundo"))};
    Valor de cadena: ${cadena.toString()}
    `;
    return explain;
  },

  toUpperCase: function () {
    explain = `El m√©todo toUpperCase() convierte la cadena a may√∫sculas.
    Ejemplo:
    const ${(texto = "hola mundo")};
    May√∫sculas: ${texto.toUpperCase()}
    `;
    return explain;
  },

  toWellFormed: function () {
    explain = `El m√©todo toWellFormed() convierte la cadena en una forma bien formada Unicode.
    Ejemplo:
    const ${(texto = "\\uD800")};
    Bien formado: ${texto.toWellFormed()} 
    `;
    return explain;
  },

  trim: function () {
    explain = `El m√©todo trim() elimina los espacios en blanco de ambos extremos de la cadena.
    Ejemplo:
    const ${(texto = "   Hola Mundo   ")};
    Cadena recortada: '${texto.trim()}'
    `;
    return explain;
  },

  trimEnd: function () {
    explain = `El m√©todo trimEnd() elimina los espacios en blanco del final de la cadena.
    Ejemplo:
    const ${(texto = "Hola Mundo   ")};
    Cadena con el final recortado: '${texto.trimEnd()}'
    `;
    return explain;
  },

  trimStart: function () {
    explain = `El m√©todo trimStart() elimina los espacios en blanco del principio de la cadena.
    Ejemplo:
    const ${(texto = "   Hola Mundo")};
    Cadena con el principio recortado: '${texto.trimStart()}'
    `;
    return explain;
  },

  valueOf: function () {
    explain = `El m√©todo valueOf() devuelve el valor primitivo de un objeto de cadena.
    Ejemplo:
    const ${(cadena = new String("Hola Mundo"))};
    Valor primitivo: ${cadena.valueOf()} 
    `;
    return explain;
  },
};

//Inyecta el texto de presentaci√≥n a un parrafo
function agregarString() {
  let parrafo = document.getElementById("p-constructor");
  let parrafoMetodoInstancia = document.getElementsByClassName("p-instance");

  //Parrafo Constructor
  parrafo.innerHTML += string.constructor() + "<br><br>";

  parrafoMetodoInstancia[0].innerHTML += string.at() + "<br><br>";
  parrafoMetodoInstancia[1].innerHTML += string.charAt() + "<br><br>";
  parrafoMetodoInstancia[2].innerHTML += string.charCodeAt() + "<br><br>";
  parrafoMetodoInstancia[3].innerHTML += string.codePointAt() + "<br><br>";
  parrafoMetodoInstancia[4].innerHTML += string.concat() + "<br><br>";
  parrafoMetodoInstancia[5].innerHTML += string.endsWith() + "<br><br>";
  parrafoMetodoInstancia[6].innerHTML += string.includes() + "<br><br>";
  parrafoMetodoInstancia[7].innerHTML += string.indexOf() + "<br><br>";
  parrafoMetodoInstancia[8].innerHTML += string.isWellFormed() + "<br><br>";
  parrafoMetodoInstancia[9].innerHTML += string.lastIndexOf() + "<br><br>";
  parrafoMetodoInstancia[10].innerHTML += string.localeCompare() + "<br><br>";
  parrafoMetodoInstancia[11].innerHTML += string.match() + "<br><br>";
  parrafoMetodoInstancia[12].innerHTML += string.matchAll() + "<br><br>";
  parrafoMetodoInstancia[13].innerHTML += string.normalize() + "<br><br>";
  parrafoMetodoInstancia[14].innerHTML += string.padEnd() + "<br><br>";
  parrafoMetodoInstancia[15].innerHTML += string.padStart() + "<br><br>";
  parrafoMetodoInstancia[16].innerHTML += string.repeat() + "<br><br>";
  parrafoMetodoInstancia[17].innerHTML += string.replace() + "<br><br>";
  parrafoMetodoInstancia[18].innerHTML += string.replaceAll() + "<br><br>";
  parrafoMetodoInstancia[19].innerHTML += string.search() + "<br><br>";
  parrafoMetodoInstancia[20].innerHTML += string.slice() + "<br><br>";
  parrafoMetodoInstancia[21].innerHTML += string.split() + "<br><br>";
  parrafoMetodoInstancia[22].innerHTML += string.startsWith() + "<br><br>";
  parrafoMetodoInstancia[23].innerHTML += string.substring() + "<br><br>";
  parrafoMetodoInstancia[24].innerHTML += string.symbol_iterator() + "<br><br>";
  parrafoMetodoInstancia[25].innerHTML += string.toLocaleLowerCase() + "<br><br>";
  parrafoMetodoInstancia[26].innerHTML += string.toLocaleUpperCase() + "<br><br>";
  parrafoMetodoInstancia[27].innerHTML += string.toLowerCase() + "<br><br>";
  parrafoMetodoInstancia[28].innerHTML += string.toString() + "<br><br>";
  parrafoMetodoInstancia[29].innerHTML += string.toUpperCase() + "<br><br>";
  parrafoMetodoInstancia[30].innerHTML += string.toWellFormed() + "<br><br>";
  parrafoMetodoInstancia[31].innerHTML += string.trim() + "<br><br>";
  parrafoMetodoInstancia[32].innerHTML += string.trimEnd() + "<br><br>";
  parrafoMetodoInstancia[33].innerHTML += string.trimStart() + "<br><br>";
  parrafoMetodoInstancia[34].innerHTML += string.valueOf() + "<br><br>";
}
agregarString();
